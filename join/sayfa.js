import C√ºzdan from "/birim/c√ºzdan/birim";
import "/birim/dil/birim";
import { kur as kaydolKur } from "/birim/kaydol/birim";
import Tckt from "/birim/tckt/birim";
import TCKT from "/lib/ethereum/TCKTLite";
import dom from "/lib/util/dom";
import { getValidationRequest } from "/sdk/client";

/** @const {!Element} */
const Ba≈üvurD√ºƒümesi = /** @type {!Element} */(dom.adla("joba"));
/** @const {!Element} */
const GeriD√ºƒümesi = /** @type {!Element} */(dom.adla("joge"));
/** @const {!Element} */
const Ba≈üvurFormu = /** @type {!Element} */(dom.adla("jof"));
/** @const {!Element} */
const GitHubKutusu = /** @type {!Element} */(dom.adla("joghi"));
/** @const {!Element} */
const EmailKutusu = /** @type {!Element} */(dom.adla("joemi"));
/** @const {!Element} */
const TwitterKutusu = /** @type {!Element} */(dom.adla("jotwi"));

/** @type {Element} */
let Se√ßiliA√ßƒ±klama = dom.adla("jod");
/** @type {Element} */
let Se√ßiliAd = null;

/**
 * Kullanƒ±cƒ±nƒ±n c√ºzdanƒ±n sahibi olduƒüunu kanƒ±tlamasƒ± i√ßin imzalanmak √ºzere
 * sorguyu olu≈üturur.
 *
 * @param {string} ilan
 * @param {!did.DecryptedSections} decryptedSections
 * @param {boolean} anonimMi
 * @return {!kimlikdao.Challenge}
 */
const sorguOlu≈ütur = (ilan, decryptedSections, anonimMi) => {
  /** @const {number} */
  const nonce = Date.now();
  /** @const {string} */
  const sorguMetni = anonimMi
    ? dom.TR
      ? "KimlikDAO Ambassador g√∂revine anonim olarak √∂nkayƒ±t yapmak istiyorum.\n\n"
      : "I would like to pre-apply for the KimlikDAO Ambassador program.\n\n"
    : (() => {
      /** @const {!did.PersonInfo} */
      const personInfo = /** @type {!did.PersonInfo} */(decryptedSections["personInfo"]);
      return (dom.TR
        ? "Ben {}, KimlikDAO <> g√∂revine ba≈üvurmak amacƒ±yla ki≈üisel bilgilerimin " +
        "KimlikDAO‚Äôya yollanmasƒ±nƒ± onaylƒ±yorum.\n\n"
        : "I, {}, hereby authorize the transmission of my personal information to " +
        "KimlikDAO in order to apply for the position of KimlikDAO <>.\n\n")
        .replace("{}", personInfo.first + " " + personInfo.last)
        .replace("<>", dom.adla("jod" + ilan).firstElementChild.innerText)
    })();
  /** @const {string} */
  const formattedNonce = new Date(nonce).toISOString()
    .slice(0, 16).replaceAll('-', '.').replace('T', ' ');
  return /** @type {!kimlikdao.Challenge} */({
    nonce,
    text: sorguMetni + formattedNonce
  });
}

/**
 * Kƒ±sa adƒ± verilen ilani g√∂sterir.
 *
 * @param {string} ilan
 */
const ilanSe√ß = (ilan) => {
  dom.gizle(Se√ßiliA√ßƒ±klama);
  Se√ßiliA√ßƒ±klama = dom.adla("jod" + ilan);
  if (!Se√ßiliA√ßƒ±klama) {
    Se√ßiliA√ßƒ±klama = dom.adla("jod");
    ilan = "";
  }
  dom.g√∂ster(Se√ßiliA√ßƒ±klama);

  if (Se√ßiliAd) Se√ßiliAd.classList.remove("sel");
  if (ilan) {
    Se√ßiliAd = dom.adla("joc" + ilan);
    Se√ßiliAd.classList.add("sel");
    dom.adlaG√∂ster("jobt");
    dom.adlaG√∂sterGizle("jotw", ilan.startsWith("sa"));
    dom.adlaG√∂sterGizle("joem", ilan.startsWith("ge"));
    dom.adlaG√∂sterGizle("jogh", ilan.startsWith("ge"));
    dom.adlaG√∂sterGizle("joli", ilan.startsWith("ge"));
  } else
    dom.adlaGizle("jobt");
  if (window.location.hash.slice(1) != ilan)
    window.location.hash = ilan;
}

/**
 * @param {Element} elm
 * @return {string} kullanƒ±cƒ±Adƒ±
 */
const kullanƒ±cƒ±Adƒ±D√ºzelt = (elm) => {
  /** @type {string} */
  let value = elm.value.trim();
  if (value.endsWith("/"))
    value = value.slice(0, -1);
  if (value.includes("http") || value.includes(".com"))
    value = value.slice(value.lastIndexOf("/") + 1);
  if (value[0] != "@")
    value = "@" + value;
  elm.value = value;
  return value;
}

/**
 * @return {!Promise<boolean>}
 */
const githubKutusuD√ºzelt = () => {
  /** @const {string} */
  const value = kullanƒ±cƒ±Adƒ±D√ºzelt(GitHubKutusu);
  window.localStorage["github"] = value;
  return fetch("//api.github.com/users/" + value.slice(1)).then((res) => {
    GitHubKutusu.nextElementSibling.innerText = res.ok ? "üëç" : "üôÖüèæ"
    GitHubKutusu.classList.toggle("err", !res.ok);
    return res.ok;
  });
}

const twitterKutusuD√ºzelt = () => {
  /** @const {string} */
  const value = kullanƒ±cƒ±Adƒ±D√ºzelt(TwitterKutusu);
  /** @const {boolean} */
  const isValid = value.length > 1;
  if (isValid) window.localStorage["twitter"] = value;

  TwitterKutusu.nextElementSibling.innerText = isValid ? "üëç" : "üôÖüèæ";
  TwitterKutusu.classList.toggle("err", !isValid);
  return isValid;
}

/**
 * @return {boolean}
 */
const emailKutusuD√ºzelt = () => {
  /** @type {string} */
  let value = EmailKutusu.value;
  /** @const {boolean} */
  const isValid = value.indexOf("@") < value.lastIndexOf(".");
  EmailKutusu.nextElementSibling.innerText = isValid ? "üëç" : "üôÖüèæ";
  EmailKutusu.classList.toggle("err", !isValid);
  if (isValid) window.localStorage["email"] = value;
  return isValid;
}

const sƒ±fƒ±rla = () => {
  /** @const {Element} */
  const form = dom.adla("jof");
  form.reset();
  for (const elm of form.elements)
    delete window.localStorage[elm.name];
  [EmailKutusu, GitHubKutusu, TwitterKutusu].forEach(
    (e) => e.nextElementSibling.innerText = "");
}

/**
 * @param {Response} res
 * @param {!Promise<!eth.ERC721Unlockable>} dosyaS√∂z√º
 */
const ba≈üvuruSonrasƒ± = (res, dosyaS√∂z√º) => {
  if (!res) return;
  sƒ±fƒ±rla();
  Ba≈üvurD√ºƒümesi.innerText = res.ok
    ? dom.TR ? "Ba≈üvurunuz alƒ±ndƒ± üëç" : "Got your application üëç"
    : dom.TR ? "Bir hata olu≈ütur ü´®" : "There is an issue ü´®"
  dom.d√ºƒümeDurdur(Ba≈üvurD√ºƒümesi);
  setTimeout(() => {
    Ba≈üvurD√ºƒümesi.classList.remove("dis");
    tcktDeƒüi≈üti("0x", dosyaS√∂z√º);
  }, 3000);
}

/**
 * Ba≈üvuru i√ßin gereken bilgileri toplayƒ±p join.kimlikdao.org'a POST'lar.
 *
 * @param {!Promise<!eth.ERC721Unlockable>} dosyaS√∂z√º
 */
const ba≈üvur = (dosyaS√∂z√º) => {
  /** @const {string} */
  const ilan = window.location.hash.slice(1);
  /** @const {boolean} */
  const geli≈ütirici = ilan.startsWith("ge");
  if (geli≈ütirici && !emailKutusuD√ºzelt()) return;
  /** @const {boolean} */
  const ambassador = ilan.startsWith("sa-ambassador");
  if (ambassador && !twitterKutusuD√ºzelt()) return;

  /** @const {!Promise<boolean>} */
  const githubƒ∞yiS√∂z√º = geli≈ütirici ? githubKutusuD√ºzelt() : Promise.resolve(true);

  githubƒ∞yiS√∂z√º.then((githubƒ∞yi) => {
    if (!githubƒ∞yi) return;
    Ba≈üvurD√ºƒümesi.innerText = dom.TR ? "Ba≈üvurunuz yollanƒ±yor ‚è≥" : "Sending your application ‚è≥";
    return dosyaS√∂z√º.then((dosya) => getValidationRequest(
      C√ºzdan.baƒülantƒ±(),
      C√ºzdan.aƒü(),
      TCKT.getAddress(C√ºzdan.aƒü()),
      /** @type {string} */(C√ºzdan.adres()),
      dosya,
      ambassador ? ["humanID"] : ["personInfo", "contactInfo", "addressInfo", "k√ºt√ºkBilgileri"],
      (decryptedSections) => sorguOlu≈ütur(ilan, decryptedSections, ambassador)
    ).then((/** @type {!kimlikdao.ValidationRequest} */ istek) => {
      istek["ilan"] = ilan;
      istek["lang"] = dom.TR ? "tr" : "en";
      /** @const {!FormData} */
      const formData = new FormData(dom.adla("jof"));
      for (const entry of formData) {
        const value = entry[1];
        if (value) istek[entry[0]] = value;
      }
      return fetch("/", {
        method: "POST",
        headers: { "content-type": "application/json;charset=utf-8" },
        body: JSON.stringify(istek)
      })
    }).catch(() => tcktDeƒüi≈üti("0x", dosyaS√∂z√º))
      .then((res) => ba≈üvuruSonrasƒ±(res, dosyaS√∂z√º))
    )
  })
}

/** @type {?string} */
let BaƒülaMetni;

/**
 * @param {?string} cidHex
 * @param {Promise<!eth.ERC721Unlockable>} dosyaS√∂z√º
 */
const tcktDeƒüi≈üti = (cidHex, dosyaS√∂z√º) => {
  Ba≈üvurD√ºƒümesi.onclick = cidHex
    ? dosyaS√∂z√º
      ? () => ba≈üvur(/** @type {!Promise<!eth.ERC721Unlockable>} */(dosyaS√∂z√º))
      : () => window.location.href = "//kimlikdao.org/" + (dom.TR ? "al#sonra=" : "mint#then=") +
        encodeURIComponent("" + window.location)
    : () => {
      C√ºzdan.a√ß();
      window.scrollTo({ top: 0, behavior: "smooth" });
    }
  if (cidHex) {
    if (!BaƒülaMetni) BaƒülaMetni = Ba≈üvurD√ºƒümesi.innerText;
    Ba≈üvurD√ºƒümesi.innerText = dosyaS√∂z√º
      ? dom.TR ? "TCKT ile ba≈üvur" : "Apply with TCKT"
      : dom.TR ? "TCKT al" : "Mint your TCKT";
  } else if (BaƒülaMetni)
    Ba≈üvurD√ºƒümesi.innerText = BaƒülaMetni;
}

const kur = () => {
  /** @const {!NodeList<!Element>} */
  const ilanlar = dom.adla("jobs").children;
  for (const elm of ilanlar)
    if (elm.classList == "joc")
      elm.onclick = () => ilanSe√ß(elm.id.slice(3));

  /** @const {string} */
  const ilan = window.location.hash.slice(1);
  if (ilan) ilanSe√ß(ilan);
  window.onhashchange = () => ilanSe√ß(window.location.hash.slice(1));
  GeriD√ºƒümesi.onclick = () => ilanSe√ß("");

  tcktDeƒüi≈üti(null, null);
  C√ºzdan.tcktDeƒüi≈üince(tcktDeƒüi≈üti);

  Tckt.K√∂k.onclick = Tckt.√ßevir;

  for (const elm of Ba≈üvurFormu.elements) {
    /** @const {?string} */
    const value = window.localStorage[elm.name];
    if (value) elm.value = value;
  }
  EmailKutusu.onpaste = EmailKutusu.onblur = emailKutusuD√ºzelt;
  GitHubKutusu.onpaste = GitHubKutusu.onblur = githubKutusuD√ºzelt;
  TwitterKutusu.onpaste = TwitterKutusu.onblur = twitterKutusuD√ºzelt;
  dom.adla("jonoi").oninput = dom.adla("jolii").onblur = (e) =>
    window.localStorage[e.target.name] = e.target.value;
}

kur();
kaydolKur("kay");